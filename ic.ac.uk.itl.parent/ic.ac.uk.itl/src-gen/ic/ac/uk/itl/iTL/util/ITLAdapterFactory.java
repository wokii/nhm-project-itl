/**
 * generated by Xtext 2.17.0
 */
package ic.ac.uk.itl.iTL.util;

import ic.ac.uk.itl.iTL.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see ic.ac.uk.itl.iTL.ITLPackage
 * @generated
 */
public class ITLAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static ITLPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ITLAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = ITLPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ITLSwitch<Adapter> modelSwitch =
    new ITLSwitch<Adapter>()
    {
      @Override
      public Adapter caseModel(Model object)
      {
        return createModelAdapter();
      }
      @Override
      public Adapter casetesting_tool(testing_tool object)
      {
        return createtesting_toolAdapter();
      }
      @Override
      public Adapter caseZAP(ZAP object)
      {
        return createZAPAdapter();
      }
      @Override
      public Adapter caseZAP_ADDRESS(ZAP_ADDRESS object)
      {
        return createZAP_ADDRESSAdapter();
      }
      @Override
      public Adapter caseZAP_MAX_DEPTH(ZAP_MAX_DEPTH object)
      {
        return createZAP_MAX_DEPTHAdapter();
      }
      @Override
      public Adapter caseZAP_API_KEY(ZAP_API_KEY object)
      {
        return createZAP_API_KEYAdapter();
      }
      @Override
      public Adapter caseZAP_TARGET(ZAP_TARGET object)
      {
        return createZAP_TARGETAdapter();
      }
      @Override
      public Adapter caseW3af(W3af object)
      {
        return createW3afAdapter();
      }
      @Override
      public Adapter caseW3AF_REPORT_ADDRESS(W3AF_REPORT_ADDRESS object)
      {
        return createW3AF_REPORT_ADDRESSAdapter();
      }
      @Override
      public Adapter caseW3AF_ADDRESS(W3AF_ADDRESS object)
      {
        return createW3AF_ADDRESSAdapter();
      }
      @Override
      public Adapter caseW3AF_TEST_TYPE(W3AF_TEST_TYPE object)
      {
        return createW3AF_TEST_TYPEAdapter();
      }
      @Override
      public Adapter caseW3AF_TARGET(W3AF_TARGET object)
      {
        return createW3AF_TARGETAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link ic.ac.uk.itl.iTL.Model <em>Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ic.ac.uk.itl.iTL.Model
   * @generated
   */
  public Adapter createModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ic.ac.uk.itl.iTL.testing_tool <em>testing tool</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ic.ac.uk.itl.iTL.testing_tool
   * @generated
   */
  public Adapter createtesting_toolAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ic.ac.uk.itl.iTL.ZAP <em>ZAP</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ic.ac.uk.itl.iTL.ZAP
   * @generated
   */
  public Adapter createZAPAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ic.ac.uk.itl.iTL.ZAP_ADDRESS <em>ZAP ADDRESS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ic.ac.uk.itl.iTL.ZAP_ADDRESS
   * @generated
   */
  public Adapter createZAP_ADDRESSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ic.ac.uk.itl.iTL.ZAP_MAX_DEPTH <em>ZAP MAX DEPTH</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ic.ac.uk.itl.iTL.ZAP_MAX_DEPTH
   * @generated
   */
  public Adapter createZAP_MAX_DEPTHAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ic.ac.uk.itl.iTL.ZAP_API_KEY <em>ZAP API KEY</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ic.ac.uk.itl.iTL.ZAP_API_KEY
   * @generated
   */
  public Adapter createZAP_API_KEYAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ic.ac.uk.itl.iTL.ZAP_TARGET <em>ZAP TARGET</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ic.ac.uk.itl.iTL.ZAP_TARGET
   * @generated
   */
  public Adapter createZAP_TARGETAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ic.ac.uk.itl.iTL.W3af <em>W3af</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ic.ac.uk.itl.iTL.W3af
   * @generated
   */
  public Adapter createW3afAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ic.ac.uk.itl.iTL.W3AF_REPORT_ADDRESS <em>W3AF REPORT ADDRESS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ic.ac.uk.itl.iTL.W3AF_REPORT_ADDRESS
   * @generated
   */
  public Adapter createW3AF_REPORT_ADDRESSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ic.ac.uk.itl.iTL.W3AF_ADDRESS <em>W3AF ADDRESS</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ic.ac.uk.itl.iTL.W3AF_ADDRESS
   * @generated
   */
  public Adapter createW3AF_ADDRESSAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ic.ac.uk.itl.iTL.W3AF_TEST_TYPE <em>W3AF TEST TYPE</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ic.ac.uk.itl.iTL.W3AF_TEST_TYPE
   * @generated
   */
  public Adapter createW3AF_TEST_TYPEAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link ic.ac.uk.itl.iTL.W3AF_TARGET <em>W3AF TARGET</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see ic.ac.uk.itl.iTL.W3AF_TARGET
   * @generated
   */
  public Adapter createW3AF_TARGETAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //ITLAdapterFactory
