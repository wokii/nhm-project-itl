/**
 * generated by Xtext 2.17.0
 */
package ic.ac.uk.itl.iTL.impl;

import ic.ac.uk.itl.iTL.ITLPackage;
import ic.ac.uk.itl.iTL.Spider;
import ic.ac.uk.itl.iTL.ZAP_ADDRESS;
import ic.ac.uk.itl.iTL.ZAP_API_KEY;
import ic.ac.uk.itl.iTL.ZAP_MAX_DEPTH;
import ic.ac.uk.itl.iTL.ZAP_TARGET;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Spider</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link ic.ac.uk.itl.iTL.impl.SpiderImpl#getZap_target <em>Zap target</em>}</li>
 *   <li>{@link ic.ac.uk.itl.iTL.impl.SpiderImpl#getZap_address <em>Zap address</em>}</li>
 *   <li>{@link ic.ac.uk.itl.iTL.impl.SpiderImpl#getZap_max_depth <em>Zap max depth</em>}</li>
 *   <li>{@link ic.ac.uk.itl.iTL.impl.SpiderImpl#getZap_api_key <em>Zap api key</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SpiderImpl extends testing_toolImpl implements Spider
{
  /**
   * The cached value of the '{@link #getZap_target() <em>Zap target</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getZap_target()
   * @generated
   * @ordered
   */
  protected ZAP_TARGET zap_target;

  /**
   * The cached value of the '{@link #getZap_address() <em>Zap address</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getZap_address()
   * @generated
   * @ordered
   */
  protected ZAP_ADDRESS zap_address;

  /**
   * The cached value of the '{@link #getZap_max_depth() <em>Zap max depth</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getZap_max_depth()
   * @generated
   * @ordered
   */
  protected ZAP_MAX_DEPTH zap_max_depth;

  /**
   * The cached value of the '{@link #getZap_api_key() <em>Zap api key</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getZap_api_key()
   * @generated
   * @ordered
   */
  protected ZAP_API_KEY zap_api_key;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SpiderImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ITLPackage.Literals.SPIDER;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ZAP_TARGET getZap_target()
  {
    return zap_target;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetZap_target(ZAP_TARGET newZap_target, NotificationChain msgs)
  {
    ZAP_TARGET oldZap_target = zap_target;
    zap_target = newZap_target;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ITLPackage.SPIDER__ZAP_TARGET, oldZap_target, newZap_target);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setZap_target(ZAP_TARGET newZap_target)
  {
    if (newZap_target != zap_target)
    {
      NotificationChain msgs = null;
      if (zap_target != null)
        msgs = ((InternalEObject)zap_target).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ITLPackage.SPIDER__ZAP_TARGET, null, msgs);
      if (newZap_target != null)
        msgs = ((InternalEObject)newZap_target).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ITLPackage.SPIDER__ZAP_TARGET, null, msgs);
      msgs = basicSetZap_target(newZap_target, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ITLPackage.SPIDER__ZAP_TARGET, newZap_target, newZap_target));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ZAP_ADDRESS getZap_address()
  {
    return zap_address;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetZap_address(ZAP_ADDRESS newZap_address, NotificationChain msgs)
  {
    ZAP_ADDRESS oldZap_address = zap_address;
    zap_address = newZap_address;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ITLPackage.SPIDER__ZAP_ADDRESS, oldZap_address, newZap_address);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setZap_address(ZAP_ADDRESS newZap_address)
  {
    if (newZap_address != zap_address)
    {
      NotificationChain msgs = null;
      if (zap_address != null)
        msgs = ((InternalEObject)zap_address).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ITLPackage.SPIDER__ZAP_ADDRESS, null, msgs);
      if (newZap_address != null)
        msgs = ((InternalEObject)newZap_address).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ITLPackage.SPIDER__ZAP_ADDRESS, null, msgs);
      msgs = basicSetZap_address(newZap_address, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ITLPackage.SPIDER__ZAP_ADDRESS, newZap_address, newZap_address));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ZAP_MAX_DEPTH getZap_max_depth()
  {
    return zap_max_depth;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetZap_max_depth(ZAP_MAX_DEPTH newZap_max_depth, NotificationChain msgs)
  {
    ZAP_MAX_DEPTH oldZap_max_depth = zap_max_depth;
    zap_max_depth = newZap_max_depth;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ITLPackage.SPIDER__ZAP_MAX_DEPTH, oldZap_max_depth, newZap_max_depth);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setZap_max_depth(ZAP_MAX_DEPTH newZap_max_depth)
  {
    if (newZap_max_depth != zap_max_depth)
    {
      NotificationChain msgs = null;
      if (zap_max_depth != null)
        msgs = ((InternalEObject)zap_max_depth).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ITLPackage.SPIDER__ZAP_MAX_DEPTH, null, msgs);
      if (newZap_max_depth != null)
        msgs = ((InternalEObject)newZap_max_depth).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ITLPackage.SPIDER__ZAP_MAX_DEPTH, null, msgs);
      msgs = basicSetZap_max_depth(newZap_max_depth, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ITLPackage.SPIDER__ZAP_MAX_DEPTH, newZap_max_depth, newZap_max_depth));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ZAP_API_KEY getZap_api_key()
  {
    return zap_api_key;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetZap_api_key(ZAP_API_KEY newZap_api_key, NotificationChain msgs)
  {
    ZAP_API_KEY oldZap_api_key = zap_api_key;
    zap_api_key = newZap_api_key;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ITLPackage.SPIDER__ZAP_API_KEY, oldZap_api_key, newZap_api_key);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setZap_api_key(ZAP_API_KEY newZap_api_key)
  {
    if (newZap_api_key != zap_api_key)
    {
      NotificationChain msgs = null;
      if (zap_api_key != null)
        msgs = ((InternalEObject)zap_api_key).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ITLPackage.SPIDER__ZAP_API_KEY, null, msgs);
      if (newZap_api_key != null)
        msgs = ((InternalEObject)newZap_api_key).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - ITLPackage.SPIDER__ZAP_API_KEY, null, msgs);
      msgs = basicSetZap_api_key(newZap_api_key, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, ITLPackage.SPIDER__ZAP_API_KEY, newZap_api_key, newZap_api_key));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ITLPackage.SPIDER__ZAP_TARGET:
        return basicSetZap_target(null, msgs);
      case ITLPackage.SPIDER__ZAP_ADDRESS:
        return basicSetZap_address(null, msgs);
      case ITLPackage.SPIDER__ZAP_MAX_DEPTH:
        return basicSetZap_max_depth(null, msgs);
      case ITLPackage.SPIDER__ZAP_API_KEY:
        return basicSetZap_api_key(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ITLPackage.SPIDER__ZAP_TARGET:
        return getZap_target();
      case ITLPackage.SPIDER__ZAP_ADDRESS:
        return getZap_address();
      case ITLPackage.SPIDER__ZAP_MAX_DEPTH:
        return getZap_max_depth();
      case ITLPackage.SPIDER__ZAP_API_KEY:
        return getZap_api_key();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ITLPackage.SPIDER__ZAP_TARGET:
        setZap_target((ZAP_TARGET)newValue);
        return;
      case ITLPackage.SPIDER__ZAP_ADDRESS:
        setZap_address((ZAP_ADDRESS)newValue);
        return;
      case ITLPackage.SPIDER__ZAP_MAX_DEPTH:
        setZap_max_depth((ZAP_MAX_DEPTH)newValue);
        return;
      case ITLPackage.SPIDER__ZAP_API_KEY:
        setZap_api_key((ZAP_API_KEY)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ITLPackage.SPIDER__ZAP_TARGET:
        setZap_target((ZAP_TARGET)null);
        return;
      case ITLPackage.SPIDER__ZAP_ADDRESS:
        setZap_address((ZAP_ADDRESS)null);
        return;
      case ITLPackage.SPIDER__ZAP_MAX_DEPTH:
        setZap_max_depth((ZAP_MAX_DEPTH)null);
        return;
      case ITLPackage.SPIDER__ZAP_API_KEY:
        setZap_api_key((ZAP_API_KEY)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ITLPackage.SPIDER__ZAP_TARGET:
        return zap_target != null;
      case ITLPackage.SPIDER__ZAP_ADDRESS:
        return zap_address != null;
      case ITLPackage.SPIDER__ZAP_MAX_DEPTH:
        return zap_max_depth != null;
      case ITLPackage.SPIDER__ZAP_API_KEY:
        return zap_api_key != null;
    }
    return super.eIsSet(featureID);
  }

} //SpiderImpl
