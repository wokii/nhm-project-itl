/**
 * generated by Xtext 2.17.0
 */
package ic.ac.uk.itl.iTL.impl;

import ic.ac.uk.itl.iTL.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class ITLFactoryImpl extends EFactoryImpl implements ITLFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static ITLFactory init()
  {
    try
    {
      ITLFactory theITLFactory = (ITLFactory)EPackage.Registry.INSTANCE.getEFactory(ITLPackage.eNS_URI);
      if (theITLFactory != null)
      {
        return theITLFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new ITLFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ITLFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case ITLPackage.MODEL: return createModel();
      case ITLPackage.TESTING_TOOL: return createtesting_tool();
      case ITLPackage.SPIDER: return createSpider();
      case ITLPackage.ZAP_ADDRESS: return createZAP_ADDRESS();
      case ITLPackage.ZAP_MAX_DEPTH: return createZAP_MAX_DEPTH();
      case ITLPackage.ZAP_API_KEY: return createZAP_API_KEY();
      case ITLPackage.ZAP_TARGET: return createZAP_TARGET();
      case ITLPackage.W3AF: return createW3af();
      case ITLPackage.W3AF_REPORT_ADDRESS: return createW3AF_REPORT_ADDRESS();
      case ITLPackage.W3AF_ADDRESS: return createW3AF_ADDRESS();
      case ITLPackage.W3AF_TEST_TYPE: return createW3AF_TEST_TYPE();
      case ITLPackage.W3AF_TARGET: return createW3AF_TARGET();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public testing_tool createtesting_tool()
  {
    testing_toolImpl testing_tool = new testing_toolImpl();
    return testing_tool;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Spider createSpider()
  {
    SpiderImpl spider = new SpiderImpl();
    return spider;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ZAP_ADDRESS createZAP_ADDRESS()
  {
    ZAP_ADDRESSImpl zaP_ADDRESS = new ZAP_ADDRESSImpl();
    return zaP_ADDRESS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ZAP_MAX_DEPTH createZAP_MAX_DEPTH()
  {
    ZAP_MAX_DEPTHImpl zaP_MAX_DEPTH = new ZAP_MAX_DEPTHImpl();
    return zaP_MAX_DEPTH;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ZAP_API_KEY createZAP_API_KEY()
  {
    ZAP_API_KEYImpl zaP_API_KEY = new ZAP_API_KEYImpl();
    return zaP_API_KEY;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ZAP_TARGET createZAP_TARGET()
  {
    ZAP_TARGETImpl zaP_TARGET = new ZAP_TARGETImpl();
    return zaP_TARGET;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public W3af createW3af()
  {
    W3afImpl w3af = new W3afImpl();
    return w3af;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public W3AF_REPORT_ADDRESS createW3AF_REPORT_ADDRESS()
  {
    W3AF_REPORT_ADDRESSImpl w3AF_REPORT_ADDRESS = new W3AF_REPORT_ADDRESSImpl();
    return w3AF_REPORT_ADDRESS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public W3AF_ADDRESS createW3AF_ADDRESS()
  {
    W3AF_ADDRESSImpl w3AF_ADDRESS = new W3AF_ADDRESSImpl();
    return w3AF_ADDRESS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public W3AF_TEST_TYPE createW3AF_TEST_TYPE()
  {
    W3AF_TEST_TYPEImpl w3AF_TEST_TYPE = new W3AF_TEST_TYPEImpl();
    return w3AF_TEST_TYPE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public W3AF_TARGET createW3AF_TARGET()
  {
    W3AF_TARGETImpl w3AF_TARGET = new W3AF_TARGETImpl();
    return w3AF_TARGET;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ITLPackage getITLPackage()
  {
    return (ITLPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static ITLPackage getPackage()
  {
    return ITLPackage.eINSTANCE;
  }

} //ITLFactoryImpl
