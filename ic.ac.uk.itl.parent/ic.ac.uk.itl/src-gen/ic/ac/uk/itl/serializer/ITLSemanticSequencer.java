/*
 * generated by Xtext 2.17.0
 */
package ic.ac.uk.itl.serializer;

import com.google.inject.Inject;
import ic.ac.uk.itl.iTL.ITLPackage;
import ic.ac.uk.itl.iTL.Model;
import ic.ac.uk.itl.iTL.W3AF_ADDRESS;
import ic.ac.uk.itl.iTL.W3AF_REPORT_ADDRESS;
import ic.ac.uk.itl.iTL.W3AF_TARGET;
import ic.ac.uk.itl.iTL.W3AF_TEST_TYPE;
import ic.ac.uk.itl.iTL.W3af;
import ic.ac.uk.itl.iTL.ZAP;
import ic.ac.uk.itl.iTL.ZAP_ADDRESS;
import ic.ac.uk.itl.iTL.ZAP_API_KEY;
import ic.ac.uk.itl.iTL.ZAP_MAX_DEPTH;
import ic.ac.uk.itl.iTL.ZAP_TARGET;
import ic.ac.uk.itl.services.ITLGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class ITLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private ITLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ITLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ITLPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case ITLPackage.W3AF_ADDRESS:
				sequence_W3AF_ADDRESS(context, (W3AF_ADDRESS) semanticObject); 
				return; 
			case ITLPackage.W3AF_REPORT_ADDRESS:
				sequence_W3AF_REPORT_ADDRESS(context, (W3AF_REPORT_ADDRESS) semanticObject); 
				return; 
			case ITLPackage.W3AF_TARGET:
				sequence_W3AF_TARGET(context, (W3AF_TARGET) semanticObject); 
				return; 
			case ITLPackage.W3AF_TEST_TYPE:
				sequence_W3AF_TEST_TYPE(context, (W3AF_TEST_TYPE) semanticObject); 
				return; 
			case ITLPackage.W3AF:
				sequence_W3af(context, (W3af) semanticObject); 
				return; 
			case ITLPackage.ZAP:
				sequence_ZAP(context, (ZAP) semanticObject); 
				return; 
			case ITLPackage.ZAP_ADDRESS:
				sequence_ZAP_ADDRESS(context, (ZAP_ADDRESS) semanticObject); 
				return; 
			case ITLPackage.ZAP_API_KEY:
				sequence_ZAP_API_KEY(context, (ZAP_API_KEY) semanticObject); 
				return; 
			case ITLPackage.ZAP_MAX_DEPTH:
				sequence_ZAP_MAX_DEPTH(context, (ZAP_MAX_DEPTH) semanticObject); 
				return; 
			case ITLPackage.ZAP_TARGET:
				sequence_ZAP_TARGET(context, (ZAP_TARGET) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     testing_tools+=testing_tool+
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     W3AF_ADDRESS returns W3AF_ADDRESS
	 *
	 * Constraint:
	 *     name=STRING
	 */
	protected void sequence_W3AF_ADDRESS(ISerializationContext context, W3AF_ADDRESS semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ITLPackage.Literals.W3AF_ADDRESS__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ITLPackage.Literals.W3AF_ADDRESS__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getW3AF_ADDRESSAccess().getNameSTRINGTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     W3AF_REPORT_ADDRESS returns W3AF_REPORT_ADDRESS
	 *
	 * Constraint:
	 *     name=STRING
	 */
	protected void sequence_W3AF_REPORT_ADDRESS(ISerializationContext context, W3AF_REPORT_ADDRESS semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ITLPackage.Literals.W3AF_REPORT_ADDRESS__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ITLPackage.Literals.W3AF_REPORT_ADDRESS__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getW3AF_REPORT_ADDRESSAccess().getNameSTRINGTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     W3AF_TARGET returns W3AF_TARGET
	 *
	 * Constraint:
	 *     name=STRING
	 */
	protected void sequence_W3AF_TARGET(ISerializationContext context, W3AF_TARGET semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ITLPackage.Literals.W3AF_TARGET__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ITLPackage.Literals.W3AF_TARGET__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getW3AF_TARGETAccess().getNameSTRINGTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     W3AF_TEST_TYPE returns W3AF_TEST_TYPE
	 *
	 * Constraint:
	 *     name=STRING
	 */
	protected void sequence_W3AF_TEST_TYPE(ISerializationContext context, W3AF_TEST_TYPE semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ITLPackage.Literals.W3AF_TEST_TYPE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ITLPackage.Literals.W3AF_TEST_TYPE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getW3AF_TEST_TYPEAccess().getNameSTRINGTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     testing_tool returns W3af
	 *     W3af returns W3af
	 *
	 * Constraint:
	 *     (name=ID w3af_test_type=W3AF_TEST_TYPE w3af_address=W3AF_ADDRESS w3af_report_path=W3AF_REPORT_ADDRESS w3af_target=W3AF_TARGET)
	 */
	protected void sequence_W3af(ISerializationContext context, W3af semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ITLPackage.Literals.TESTING_TOOL__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ITLPackage.Literals.TESTING_TOOL__NAME));
			if (transientValues.isValueTransient(semanticObject, ITLPackage.Literals.W3AF__W3AF_TEST_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ITLPackage.Literals.W3AF__W3AF_TEST_TYPE));
			if (transientValues.isValueTransient(semanticObject, ITLPackage.Literals.W3AF__W3AF_ADDRESS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ITLPackage.Literals.W3AF__W3AF_ADDRESS));
			if (transientValues.isValueTransient(semanticObject, ITLPackage.Literals.W3AF__W3AF_REPORT_PATH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ITLPackage.Literals.W3AF__W3AF_REPORT_PATH));
			if (transientValues.isValueTransient(semanticObject, ITLPackage.Literals.W3AF__W3AF_TARGET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ITLPackage.Literals.W3AF__W3AF_TARGET));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getW3afAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getW3afAccess().getW3af_test_typeW3AF_TEST_TYPEParserRuleCall_3_0(), semanticObject.getW3af_test_type());
		feeder.accept(grammarAccess.getW3afAccess().getW3af_addressW3AF_ADDRESSParserRuleCall_5_0(), semanticObject.getW3af_address());
		feeder.accept(grammarAccess.getW3afAccess().getW3af_report_pathW3AF_REPORT_ADDRESSParserRuleCall_7_0(), semanticObject.getW3af_report_path());
		feeder.accept(grammarAccess.getW3afAccess().getW3af_targetW3AF_TARGETParserRuleCall_9_0(), semanticObject.getW3af_target());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ZAP_ADDRESS returns ZAP_ADDRESS
	 *
	 * Constraint:
	 *     name=STRING
	 */
	protected void sequence_ZAP_ADDRESS(ISerializationContext context, ZAP_ADDRESS semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ITLPackage.Literals.ZAP_ADDRESS__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ITLPackage.Literals.ZAP_ADDRESS__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getZAP_ADDRESSAccess().getNameSTRINGTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ZAP_API_KEY returns ZAP_API_KEY
	 *
	 * Constraint:
	 *     name=STRING
	 */
	protected void sequence_ZAP_API_KEY(ISerializationContext context, ZAP_API_KEY semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ITLPackage.Literals.ZAP_API_KEY__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ITLPackage.Literals.ZAP_API_KEY__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getZAP_API_KEYAccess().getNameSTRINGTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ZAP_MAX_DEPTH returns ZAP_MAX_DEPTH
	 *
	 * Constraint:
	 *     name=INT
	 */
	protected void sequence_ZAP_MAX_DEPTH(ISerializationContext context, ZAP_MAX_DEPTH semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ITLPackage.Literals.ZAP_MAX_DEPTH__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ITLPackage.Literals.ZAP_MAX_DEPTH__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getZAP_MAX_DEPTHAccess().getNameINTTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ZAP_TARGET returns ZAP_TARGET
	 *
	 * Constraint:
	 *     name=STRING
	 */
	protected void sequence_ZAP_TARGET(ISerializationContext context, ZAP_TARGET semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ITLPackage.Literals.ZAP_TARGET__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ITLPackage.Literals.ZAP_TARGET__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getZAP_TARGETAccess().getNameSTRINGTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     testing_tool returns ZAP
	 *     ZAP returns ZAP
	 *
	 * Constraint:
	 *     (name=ID zap_target=ZAP_TARGET zap_address=ZAP_ADDRESS zap_max_depth=ZAP_MAX_DEPTH zap_api_key=ZAP_API_KEY)
	 */
	protected void sequence_ZAP(ISerializationContext context, ZAP semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ITLPackage.Literals.TESTING_TOOL__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ITLPackage.Literals.TESTING_TOOL__NAME));
			if (transientValues.isValueTransient(semanticObject, ITLPackage.Literals.ZAP__ZAP_TARGET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ITLPackage.Literals.ZAP__ZAP_TARGET));
			if (transientValues.isValueTransient(semanticObject, ITLPackage.Literals.ZAP__ZAP_ADDRESS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ITLPackage.Literals.ZAP__ZAP_ADDRESS));
			if (transientValues.isValueTransient(semanticObject, ITLPackage.Literals.ZAP__ZAP_MAX_DEPTH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ITLPackage.Literals.ZAP__ZAP_MAX_DEPTH));
			if (transientValues.isValueTransient(semanticObject, ITLPackage.Literals.ZAP__ZAP_API_KEY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ITLPackage.Literals.ZAP__ZAP_API_KEY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getZAPAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getZAPAccess().getZap_targetZAP_TARGETParserRuleCall_3_0(), semanticObject.getZap_target());
		feeder.accept(grammarAccess.getZAPAccess().getZap_addressZAP_ADDRESSParserRuleCall_5_0(), semanticObject.getZap_address());
		feeder.accept(grammarAccess.getZAPAccess().getZap_max_depthZAP_MAX_DEPTHParserRuleCall_7_0(), semanticObject.getZap_max_depth());
		feeder.accept(grammarAccess.getZAPAccess().getZap_api_keyZAP_API_KEYParserRuleCall_9_0(), semanticObject.getZap_api_key());
		feeder.finish();
	}
	
	
}
