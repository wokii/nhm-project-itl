/*
 * generated by Xtext 2.17.0
 */
package ic.ac.uk.itl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ITLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.itl.ITL.Model");
		private final Assignment cTesting_toolsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTesting_toolsTesting_toolParserRuleCall_0 = (RuleCall)cTesting_toolsAssignment.eContents().get(0);
		
		//Model:
		//	testing_tools+=testing_tool*;
		@Override public ParserRule getRule() { return rule; }
		
		//testing_tools+=testing_tool*
		public Assignment getTesting_toolsAssignment() { return cTesting_toolsAssignment; }
		
		//testing_tool
		public RuleCall getTesting_toolsTesting_toolParserRuleCall_0() { return cTesting_toolsTesting_toolParserRuleCall_0; }
	}
	public class Testing_toolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.itl.ITL.testing_tool");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSpiderParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cW3afParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//testing_tool:
		//	Spider | W3af;
		@Override public ParserRule getRule() { return rule; }
		
		//Spider | W3af
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Spider
		public RuleCall getSpiderParserRuleCall_0() { return cSpiderParserRuleCall_0; }
		
		//W3af
		public RuleCall getW3afParserRuleCall_1() { return cW3afParserRuleCall_1; }
	}
	public class SpiderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.itl.ITL.Spider");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSpiderKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cZap_targetAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cZap_targetZAP_TARGETParserRuleCall_3_0 = (RuleCall)cZap_targetAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cZap_addressAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cZap_addressZAP_ADDRESSParserRuleCall_5_0 = (RuleCall)cZap_addressAssignment_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cZap_max_depthAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cZap_max_depthZAP_MAX_DEPTHParserRuleCall_7_0 = (RuleCall)cZap_max_depthAssignment_7.eContents().get(0);
		private final Keyword cSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cZap_api_keyAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cZap_api_keyZAP_API_KEYParserRuleCall_9_0 = (RuleCall)cZap_api_keyAssignment_9.eContents().get(0);
		private final Keyword cSemicolonKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//Spider:
		//	'Spider' name=ID '{' zap_target=ZAP_TARGET ';' zap_address=ZAP_ADDRESS ';' zap_max_depth=ZAP_MAX_DEPTH ';'
		//	zap_api_key=ZAP_API_KEY ';'? '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Spider' name=ID '{' zap_target=ZAP_TARGET ';' zap_address=ZAP_ADDRESS ';' zap_max_depth=ZAP_MAX_DEPTH ';'
		//zap_api_key=ZAP_API_KEY ';'? '}'
		public Group getGroup() { return cGroup; }
		
		//'Spider'
		public Keyword getSpiderKeyword_0() { return cSpiderKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//zap_target=ZAP_TARGET
		public Assignment getZap_targetAssignment_3() { return cZap_targetAssignment_3; }
		
		//ZAP_TARGET
		public RuleCall getZap_targetZAP_TARGETParserRuleCall_3_0() { return cZap_targetZAP_TARGETParserRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
		
		//zap_address=ZAP_ADDRESS
		public Assignment getZap_addressAssignment_5() { return cZap_addressAssignment_5; }
		
		//ZAP_ADDRESS
		public RuleCall getZap_addressZAP_ADDRESSParserRuleCall_5_0() { return cZap_addressZAP_ADDRESSParserRuleCall_5_0; }
		
		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
		
		//zap_max_depth=ZAP_MAX_DEPTH
		public Assignment getZap_max_depthAssignment_7() { return cZap_max_depthAssignment_7; }
		
		//ZAP_MAX_DEPTH
		public RuleCall getZap_max_depthZAP_MAX_DEPTHParserRuleCall_7_0() { return cZap_max_depthZAP_MAX_DEPTHParserRuleCall_7_0; }
		
		//';'
		public Keyword getSemicolonKeyword_8() { return cSemicolonKeyword_8; }
		
		//zap_api_key=ZAP_API_KEY
		public Assignment getZap_api_keyAssignment_9() { return cZap_api_keyAssignment_9; }
		
		//ZAP_API_KEY
		public RuleCall getZap_api_keyZAP_API_KEYParserRuleCall_9_0() { return cZap_api_keyZAP_API_KEYParserRuleCall_9_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_10() { return cSemicolonKeyword_10; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
	}
	public class ZAP_ADDRESSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.itl.ITL.ZAP_ADDRESS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cZAP_ADDRESSKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//ZAP_ADDRESS:
		//	'ZAP_ADDRESS:' name=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'ZAP_ADDRESS:' name=STRING
		public Group getGroup() { return cGroup; }
		
		//'ZAP_ADDRESS:'
		public Keyword getZAP_ADDRESSKeyword_0() { return cZAP_ADDRESSKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
	}
	public class ZAP_MAX_DEPTHElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.itl.ITL.ZAP_MAX_DEPTH");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cZAP_MAX_DEPTHKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameINTTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//ZAP_MAX_DEPTH:
		//	'ZAP_MAX_DEPTH:' name=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'ZAP_MAX_DEPTH:' name=INT
		public Group getGroup() { return cGroup; }
		
		//'ZAP_MAX_DEPTH:'
		public Keyword getZAP_MAX_DEPTHKeyword_0() { return cZAP_MAX_DEPTHKeyword_0; }
		
		//name=INT
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//INT
		public RuleCall getNameINTTerminalRuleCall_1_0() { return cNameINTTerminalRuleCall_1_0; }
	}
	public class ZAP_API_KEYElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.itl.ITL.ZAP_API_KEY");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cZAP_API_KEYKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//ZAP_API_KEY:
		//	'ZAP_API_KEY:' name=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'ZAP_API_KEY:' name=STRING
		public Group getGroup() { return cGroup; }
		
		//'ZAP_API_KEY:'
		public Keyword getZAP_API_KEYKeyword_0() { return cZAP_API_KEYKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
	}
	public class ZAP_TARGETElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.itl.ITL.ZAP_TARGET");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cZAP_TARGETKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//ZAP_TARGET:
		//	'ZAP_TARGET:' name=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'ZAP_TARGET:' name=STRING
		public Group getGroup() { return cGroup; }
		
		//'ZAP_TARGET:'
		public Keyword getZAP_TARGETKeyword_0() { return cZAP_TARGETKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
	}
	public class W3afElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.itl.ITL.W3af");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cW3afKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cW3af_test_typeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cW3af_test_typeW3AF_TEST_TYPEParserRuleCall_3_0 = (RuleCall)cW3af_test_typeAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cW3af_addressAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cW3af_addressW3AF_ADDRESSParserRuleCall_5_0 = (RuleCall)cW3af_addressAssignment_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cW3af_report_pathAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cW3af_report_pathW3AF_REPORT_ADDRESSParserRuleCall_7_0 = (RuleCall)cW3af_report_pathAssignment_7.eContents().get(0);
		private final Keyword cSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cW3af_targetAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cW3af_targetW3AF_TARGETParserRuleCall_9_0 = (RuleCall)cW3af_targetAssignment_9.eContents().get(0);
		private final Keyword cSemicolonKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//W3af:
		//	'W3af' name=ID '{' w3af_test_type=W3AF_TEST_TYPE ';' w3af_address=W3AF_ADDRESS ';'
		//	w3af_report_path=W3AF_REPORT_ADDRESS ';' w3af_target=W3AF_TARGET ';'? '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'W3af' name=ID '{' w3af_test_type=W3AF_TEST_TYPE ';' w3af_address=W3AF_ADDRESS ';' w3af_report_path=W3AF_REPORT_ADDRESS
		//';' w3af_target=W3AF_TARGET ';'? '}'
		public Group getGroup() { return cGroup; }
		
		//'W3af'
		public Keyword getW3afKeyword_0() { return cW3afKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//w3af_test_type=W3AF_TEST_TYPE
		public Assignment getW3af_test_typeAssignment_3() { return cW3af_test_typeAssignment_3; }
		
		//W3AF_TEST_TYPE
		public RuleCall getW3af_test_typeW3AF_TEST_TYPEParserRuleCall_3_0() { return cW3af_test_typeW3AF_TEST_TYPEParserRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
		
		//w3af_address=W3AF_ADDRESS
		public Assignment getW3af_addressAssignment_5() { return cW3af_addressAssignment_5; }
		
		//W3AF_ADDRESS
		public RuleCall getW3af_addressW3AF_ADDRESSParserRuleCall_5_0() { return cW3af_addressW3AF_ADDRESSParserRuleCall_5_0; }
		
		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
		
		//w3af_report_path=W3AF_REPORT_ADDRESS
		public Assignment getW3af_report_pathAssignment_7() { return cW3af_report_pathAssignment_7; }
		
		//W3AF_REPORT_ADDRESS
		public RuleCall getW3af_report_pathW3AF_REPORT_ADDRESSParserRuleCall_7_0() { return cW3af_report_pathW3AF_REPORT_ADDRESSParserRuleCall_7_0; }
		
		//';'
		public Keyword getSemicolonKeyword_8() { return cSemicolonKeyword_8; }
		
		//w3af_target=W3AF_TARGET
		public Assignment getW3af_targetAssignment_9() { return cW3af_targetAssignment_9; }
		
		//W3AF_TARGET
		public RuleCall getW3af_targetW3AF_TARGETParserRuleCall_9_0() { return cW3af_targetW3AF_TARGETParserRuleCall_9_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_10() { return cSemicolonKeyword_10; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
	}
	public class W3AF_REPORT_ADDRESSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.itl.ITL.W3AF_REPORT_ADDRESS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cW3AF_REPORT_ADDRESSKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//W3AF_REPORT_ADDRESS:
		//	'W3AF_REPORT_ADDRESS:' name=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'W3AF_REPORT_ADDRESS:' name=STRING
		public Group getGroup() { return cGroup; }
		
		//'W3AF_REPORT_ADDRESS:'
		public Keyword getW3AF_REPORT_ADDRESSKeyword_0() { return cW3AF_REPORT_ADDRESSKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
	}
	public class W3AF_ADDRESSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.itl.ITL.W3AF_ADDRESS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cW3AF_ADDRESSKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//W3AF_ADDRESS:
		//	'W3AF_ADDRESS:' name=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'W3AF_ADDRESS:' name=STRING
		public Group getGroup() { return cGroup; }
		
		//'W3AF_ADDRESS:'
		public Keyword getW3AF_ADDRESSKeyword_0() { return cW3AF_ADDRESSKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
	}
	public class W3AF_TEST_TYPEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.itl.ITL.W3AF_TEST_TYPE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cW3AF_TEST_TYPEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//W3AF_TEST_TYPE:
		//	'W3AF_TEST_TYPE:' name=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'W3AF_TEST_TYPE:' name=STRING
		public Group getGroup() { return cGroup; }
		
		//'W3AF_TEST_TYPE:'
		public Keyword getW3AF_TEST_TYPEKeyword_0() { return cW3AF_TEST_TYPEKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
	}
	public class W3AF_TARGETElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ic.ac.uk.itl.ITL.W3AF_TARGET");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cW3AF_TARGETKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//W3AF_TARGET:
		//	'W3AF_TARGET:' name=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'W3AF_TARGET:' name=STRING
		public Group getGroup() { return cGroup; }
		
		//'W3AF_TARGET:'
		public Keyword getW3AF_TARGETKeyword_0() { return cW3AF_TARGETKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
	}
	
	
	private final ModelElements pModel;
	private final Testing_toolElements pTesting_tool;
	private final SpiderElements pSpider;
	private final ZAP_ADDRESSElements pZAP_ADDRESS;
	private final ZAP_MAX_DEPTHElements pZAP_MAX_DEPTH;
	private final ZAP_API_KEYElements pZAP_API_KEY;
	private final ZAP_TARGETElements pZAP_TARGET;
	private final W3afElements pW3af;
	private final W3AF_REPORT_ADDRESSElements pW3AF_REPORT_ADDRESS;
	private final W3AF_ADDRESSElements pW3AF_ADDRESS;
	private final W3AF_TEST_TYPEElements pW3AF_TEST_TYPE;
	private final W3AF_TARGETElements pW3AF_TARGET;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ITLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pTesting_tool = new Testing_toolElements();
		this.pSpider = new SpiderElements();
		this.pZAP_ADDRESS = new ZAP_ADDRESSElements();
		this.pZAP_MAX_DEPTH = new ZAP_MAX_DEPTHElements();
		this.pZAP_API_KEY = new ZAP_API_KEYElements();
		this.pZAP_TARGET = new ZAP_TARGETElements();
		this.pW3af = new W3afElements();
		this.pW3AF_REPORT_ADDRESS = new W3AF_REPORT_ADDRESSElements();
		this.pW3AF_ADDRESS = new W3AF_ADDRESSElements();
		this.pW3AF_TEST_TYPE = new W3AF_TEST_TYPEElements();
		this.pW3AF_TARGET = new W3AF_TARGETElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("ic.ac.uk.itl.ITL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	testing_tools+=testing_tool*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//testing_tool:
	//	Spider | W3af;
	public Testing_toolElements getTesting_toolAccess() {
		return pTesting_tool;
	}
	
	public ParserRule getTesting_toolRule() {
		return getTesting_toolAccess().getRule();
	}
	
	//Spider:
	//	'Spider' name=ID '{' zap_target=ZAP_TARGET ';' zap_address=ZAP_ADDRESS ';' zap_max_depth=ZAP_MAX_DEPTH ';'
	//	zap_api_key=ZAP_API_KEY ';'? '}';
	public SpiderElements getSpiderAccess() {
		return pSpider;
	}
	
	public ParserRule getSpiderRule() {
		return getSpiderAccess().getRule();
	}
	
	//ZAP_ADDRESS:
	//	'ZAP_ADDRESS:' name=STRING;
	public ZAP_ADDRESSElements getZAP_ADDRESSAccess() {
		return pZAP_ADDRESS;
	}
	
	public ParserRule getZAP_ADDRESSRule() {
		return getZAP_ADDRESSAccess().getRule();
	}
	
	//ZAP_MAX_DEPTH:
	//	'ZAP_MAX_DEPTH:' name=INT;
	public ZAP_MAX_DEPTHElements getZAP_MAX_DEPTHAccess() {
		return pZAP_MAX_DEPTH;
	}
	
	public ParserRule getZAP_MAX_DEPTHRule() {
		return getZAP_MAX_DEPTHAccess().getRule();
	}
	
	//ZAP_API_KEY:
	//	'ZAP_API_KEY:' name=STRING;
	public ZAP_API_KEYElements getZAP_API_KEYAccess() {
		return pZAP_API_KEY;
	}
	
	public ParserRule getZAP_API_KEYRule() {
		return getZAP_API_KEYAccess().getRule();
	}
	
	//ZAP_TARGET:
	//	'ZAP_TARGET:' name=STRING;
	public ZAP_TARGETElements getZAP_TARGETAccess() {
		return pZAP_TARGET;
	}
	
	public ParserRule getZAP_TARGETRule() {
		return getZAP_TARGETAccess().getRule();
	}
	
	//W3af:
	//	'W3af' name=ID '{' w3af_test_type=W3AF_TEST_TYPE ';' w3af_address=W3AF_ADDRESS ';'
	//	w3af_report_path=W3AF_REPORT_ADDRESS ';' w3af_target=W3AF_TARGET ';'? '}';
	public W3afElements getW3afAccess() {
		return pW3af;
	}
	
	public ParserRule getW3afRule() {
		return getW3afAccess().getRule();
	}
	
	//W3AF_REPORT_ADDRESS:
	//	'W3AF_REPORT_ADDRESS:' name=STRING;
	public W3AF_REPORT_ADDRESSElements getW3AF_REPORT_ADDRESSAccess() {
		return pW3AF_REPORT_ADDRESS;
	}
	
	public ParserRule getW3AF_REPORT_ADDRESSRule() {
		return getW3AF_REPORT_ADDRESSAccess().getRule();
	}
	
	//W3AF_ADDRESS:
	//	'W3AF_ADDRESS:' name=STRING;
	public W3AF_ADDRESSElements getW3AF_ADDRESSAccess() {
		return pW3AF_ADDRESS;
	}
	
	public ParserRule getW3AF_ADDRESSRule() {
		return getW3AF_ADDRESSAccess().getRule();
	}
	
	//W3AF_TEST_TYPE:
	//	'W3AF_TEST_TYPE:' name=STRING;
	public W3AF_TEST_TYPEElements getW3AF_TEST_TYPEAccess() {
		return pW3AF_TEST_TYPE;
	}
	
	public ParserRule getW3AF_TEST_TYPERule() {
		return getW3AF_TEST_TYPEAccess().getRule();
	}
	
	//W3AF_TARGET:
	//	'W3AF_TARGET:' name=STRING;
	public W3AF_TARGETElements getW3AF_TARGETAccess() {
		return pW3AF_TARGET;
	}
	
	public ParserRule getW3AF_TARGETRule() {
		return getW3AF_TARGETAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
