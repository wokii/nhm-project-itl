/**
 * generated by Xtext 2.17.0
 */
package ic.ac.uk.itl.generator;

import com.google.common.collect.Iterables;
import ic.ac.uk.itl.iTL.W3af;
import ic.ac.uk.itl.iTL.ZAP;
import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class ITLGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    String zap_result = "";
    String zap_filename = "";
    String zap_file_path = "";
    Iterable<ZAP> _filter = Iterables.<ZAP>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), ZAP.class);
    for (final ZAP spider : _filter) {
      {
        zap_filename = spider.getName();
        zap_result = this.compile(spider).toString();
        zap_file_path = spider.getZap_address().getName();
        fsa.generateFile(((zap_file_path + zap_filename) + ".py"), zap_result);
        try {
          File file = new File(((zap_file_path + zap_filename) + ".py"));
          file.getParentFile().mkdirs();
          PrintWriter write = new PrintWriter(file, "UTF-8");
          write.println(zap_result);
          write.close();
        } catch (final Throwable _t) {
          if (_t instanceof IOException) {
          } else {
            throw Exceptions.sneakyThrow(_t);
          }
        }
      }
    }
    String w3af_result = "";
    String w3af_filename = "";
    String w3af_file_path = "";
    Iterable<W3af> _filter_1 = Iterables.<W3af>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), W3af.class);
    for (final W3af w3af : _filter_1) {
      {
        w3af_filename = w3af.getName();
        w3af_result = this.compile(w3af).toString();
        w3af_file_path = w3af.getW3af_address().getName();
        fsa.generateFile(((w3af_file_path + w3af_filename) + ".w3af"), w3af_result);
        try {
          File file = new File(((w3af_file_path + w3af_filename) + ".w3af"));
          file.getParentFile().mkdirs();
          PrintWriter write = new PrintWriter(file, "UTF-8");
          write.println(w3af_result);
          write.close();
        } catch (final Throwable _t) {
          if (_t instanceof IOException) {
          } else {
            throw Exceptions.sneakyThrow(_t);
          }
        }
      }
    }
  }
  
  public CharSequence compile(final ZAP spider) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("#!/usr/bin/env python");
    _builder.newLine();
    _builder.append("# A basic ZAP Python API example which spiders and scans a target URL");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import time");
    _builder.newLine();
    _builder.append("from pprint import pprint");
    _builder.newLine();
    _builder.append("from zapv2 import ZAPv2");
    _builder.newLine();
    _builder.append("# use pip install python-owasp-zap-v2.4 to install python api client in order to run this script");
    _builder.newLine();
    _builder.newLine();
    _builder.append("target = \"");
    String _name = spider.getZap_target().getName();
    _builder.append(_name);
    _builder.append("\"");
    _builder.newLineIfNotEmpty();
    _builder.append("apikey = \"");
    String _name_1 = spider.getZap_api_key().getName();
    _builder.append(_name_1);
    _builder.append("\" # Change to match the API key set in ZAP, or use None if the API key is disabled");
    _builder.newLineIfNotEmpty();
    _builder.append("#");
    _builder.newLine();
    _builder.append("# By default ZAP API client will connect to port 8080");
    _builder.newLine();
    _builder.append("zap = ZAPv2(apikey=apikey)");
    _builder.newLine();
    _builder.append("# Use the line below if ZAP is not listening on port 8080, for example, if listening on port 8090");
    _builder.newLine();
    _builder.append("#zap = ZAPv2(apikey=apikey, proxies={\'http\': target+\':\'+str(8080), \'https\': target+\':\'+str(8080)})");
    _builder.newLine();
    _builder.newLine();
    _builder.append("# Proxy a request to the target so that ZAP has something to deal with");
    _builder.newLine();
    _builder.append("print(\'Accessing target {}\'.format(target))");
    _builder.newLine();
    _builder.append("zap.urlopen(target)");
    _builder.newLine();
    _builder.append("# Give the sites tree a chance to get updated");
    _builder.newLine();
    _builder.append("time.sleep(2)");
    _builder.newLine();
    _builder.newLine();
    _builder.append("print(\'Spidering target {}\'.format(target))");
    _builder.newLine();
    _builder.newLine();
    _builder.append("scanid = zap.spider.scan(target)");
    _builder.newLine();
    _builder.append("zap.spider.set_option_max_depth(");
    int _name_2 = spider.getZap_max_depth().getName();
    _builder.append(_name_2);
    _builder.append(")");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("# Give the Spider a chance to start");
    _builder.newLine();
    _builder.append("time.sleep(2)");
    _builder.newLine();
    _builder.append("while (int(zap.spider.status(scanid)) < 100):");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("# Loop until the spider has finished");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("print(\'Spider progress %: {}\'.format(zap.spider.status(scanid)))");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("time.sleep(2)");
    _builder.newLine();
    _builder.newLine();
    _builder.append("print (\'Spider completed\')");
    _builder.newLine();
    _builder.newLine();
    _builder.append("while (int(zap.pscan.records_to_scan) > 0):");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("print (\'Records to passive scan : {}\'.format(zap.pscan.records_to_scan))");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("time.sleep(2)");
    _builder.newLine();
    _builder.newLine();
    _builder.append("print (\'Passive Scan completed\')");
    _builder.newLine();
    _builder.newLine();
    _builder.append("print (\'Active Scanning target {}\'.format(target))");
    _builder.newLine();
    _builder.append("scanid = zap.ascan.scan(target)");
    _builder.newLine();
    _builder.append("while (int(zap.ascan.status(scanid)) < 100):");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("# Loop until the scanner has finished");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("print (\'Scan progress %: {}\'.format(zap.ascan.status(scanid)))");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("time.sleep(5)");
    _builder.newLine();
    _builder.newLine();
    _builder.append("print (\'Active Scan completed\')");
    _builder.newLine();
    _builder.newLine();
    _builder.append("# Report the results");
    _builder.newLine();
    _builder.newLine();
    _builder.append("print (\'Hosts: {}\'.format(\', \'.join(zap.core.hosts)))");
    _builder.newLine();
    _builder.append("print (\'Alerts: \')");
    _builder.newLine();
    _builder.append("pprint (zap.core.alerts())");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final W3af w3af) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("plugins");
    _builder.newLine();
    _builder.append("output console, html_file");
    _builder.newLine();
    _builder.append("output");
    _builder.newLine();
    _builder.append("output config html_file");
    _builder.newLine();
    _builder.append("set verbose true");
    _builder.newLine();
    _builder.append("back");
    _builder.newLine();
    _builder.newLine();
    _builder.append("output config console");
    _builder.newLine();
    _builder.append("set verbose true");
    _builder.newLine();
    _builder.append("back");
    _builder.newLine();
    {
      boolean _contains = w3af.getW3af_test_type().getName().contains("crawl");
      if (_contains) {
        _builder.append("crawl web_spider");
        _builder.newLine();
        _builder.append("crawl config web_spider");
        _builder.newLine();
        _builder.append("set only_forward true");
        _builder.newLine();
        _builder.append("back");
        _builder.newLine();
        _builder.newLine();
      }
    }
    {
      boolean _contains_1 = w3af.getW3af_test_type().getName().contains("audit");
      if (_contains_1) {
        _builder.append("audit all");
        _builder.newLine();
        _builder.append("audit");
        _builder.newLine();
      }
    }
    {
      boolean _contains_2 = w3af.getW3af_test_type().getName().contains("evasion");
      if (_contains_2) {
        _builder.append("evasion all");
        _builder.newLine();
        _builder.append("evasion");
        _builder.newLine();
      }
    }
    {
      boolean _contains_3 = w3af.getW3af_test_type().getName().contains("auth");
      if (_contains_3) {
        _builder.append("auth all");
        _builder.newLine();
        _builder.append("auth");
        _builder.newLine();
      }
    }
    {
      boolean _contains_4 = w3af.getW3af_test_type().getName().contains("bruteforce");
      if (_contains_4) {
        _builder.append("bruteforce all");
        _builder.newLine();
        _builder.append("bruteforce");
        _builder.newLine();
      }
    }
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("back");
    _builder.newLine();
    _builder.append("target");
    _builder.newLine();
    _builder.append("set target ");
    String _name = w3af.getW3af_target().getName();
    _builder.append(_name);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("back");
    _builder.newLine();
    _builder.append("start");
    _builder.newLine();
    _builder.newLine();
    _builder.append("exit");
    _builder.newLine();
    return _builder;
  }
}
