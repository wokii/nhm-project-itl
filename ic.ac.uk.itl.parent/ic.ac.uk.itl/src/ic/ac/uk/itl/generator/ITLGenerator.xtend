/*
 * generated by Xtext 2.17.0
 */
package ic.ac.uk.itl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import ic.ac.uk.itl.iTL.Spider
import ic.ac.uk.itl.iTL.W3af
import java.io.File
import java.io.PrintWriter
import java.io.IOException

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class ITLGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
//		fsa.generateFile('greetings.txt', 'People to greet: ' + 
//			resource.allContents
//				.filter(Greeting)
//				.map[name]
//				.join(', '))
		var zap_result = "";
		var zap_filename = "";
		var zap_file_path = "";
		for (spider : resource.allContents.toIterable.filter(Spider)){
			zap_filename = spider.name
			zap_result = spider.compile.toString;
			zap_file_path = spider.zap_address.name;
			fsa.generateFile(zap_file_path + zap_filename + ".py", zap_result)
			
			try {
				var file = new File(zap_file_path + zap_filename + ".py");
				file.getParentFile().mkdirs();
				
				var write = new PrintWriter(file, "UTF-8");
				write.println(zap_result);
				write.close();
				
			} catch (IOException e){
				
			}
			
		}
		var w3af_result = "";
		var w3af_filename = "";
		var w3af_file_path = "";
		for (w3af : resource.allContents.toIterable.filter(W3af)){
			w3af_filename = w3af.name
			w3af_result = w3af.compile.toString;
			w3af_file_path = w3af.w3af_address.name;
			fsa.generateFile(w3af_file_path + w3af_filename + ".w3af", w3af_result)
			
			try {
				var file = new File(w3af_file_path + w3af_filename + ".w3af");
				file.getParentFile().mkdirs();
				
				var write = new PrintWriter(file, "UTF-8");
				write.println(w3af_result);
				write.close();
				
			} catch (IOException e){
				
			}
		}
		
	}
	def compile(Spider spider) {
		'''
		#!/usr/bin/env python
		# A basic ZAP Python API example which spiders and scans a target URL
		
		import time
		from pprint import pprint
		from zapv2 import ZAPv2
		# use pip install python-owasp-zap-v2.4 to install python api client in order to run this script
		
		target = "«spider.zap_target.name»"
		apikey = "«spider.zap_api_key.name»" # Change to match the API key set in ZAP, or use None if the API key is disabled
		#
		# By default ZAP API client will connect to port 8080
		zap = ZAPv2(apikey=apikey)
		# Use the line below if ZAP is not listening on port 8080, for example, if listening on port 8090
		#zap = ZAPv2(apikey=apikey, proxies={'http': target+':'+str(8080), 'https': target+':'+str(8080)})
		
		# Proxy a request to the target so that ZAP has something to deal with
		print('Accessing target {}'.format(target))
		zap.urlopen(target)
		# Give the sites tree a chance to get updated
		time.sleep(2)
		
		print('Spidering target {}'.format(target))
		scanid = zap.spider.scan(target)
		zap.spider.set_option_max_depth(«spider.zap_max_depth.name»)
		# Give the Spider a chance to start
		time.sleep(2)
		while (int(zap.spider.status(scanid)) < 100):
		    # Loop until the spider has finished
		    print('Spider progress %: {}'.format(zap.spider.status(scanid)))
		    time.sleep(2)
		
		print ('Spider completed')
		
		while (int(zap.pscan.records_to_scan) > 0):
		      print ('Records to passive scan : {}'.format(zap.pscan.records_to_scan))
		      time.sleep(2)
		
		print ('Passive Scan completed')
		
		print ('Active Scanning target {}'.format(target))
		scanid = zap.ascan.scan(target)
		while (int(zap.ascan.status(scanid)) < 100):
		    # Loop until the scanner has finished
		    print ('Scan progress %: {}'.format(zap.ascan.status(scanid)))
		    time.sleep(5)
		
		print ('Active Scan completed')
		
		# Report the results
		
		print ('Hosts: {}'.format(', '.join(zap.core.hosts)))
		print ('Alerts: ')
		pprint (zap.core.alerts())
		'''
	}
	def compile(W3af w3af){
		'''
		plugins
		output console, html_file
		output
		output config html_file
		set verbose true
		back
		
		output config console
		set verbose true
		back
		
		«IF (w3af.w3af_test_type.name.contains('audit'))»
			audit all
			audit
		«ENDIF»
		«IF (w3af.w3af_test_type.name.contains('evasion'))»
			evasion all
			evasion
		«ENDIF»
		«IF (w3af.w3af_test_type.name.contains('auth'))»
			auth all
			auth
		«ENDIF»
		«IF (w3af.w3af_test_type.name.contains('bruteforce'))»
			bruteforce all
			audit
		«ENDIF»
		«IF (w3af.w3af_test_type.name.contains('crawl'))»
			crawl all
			crawl
		«ENDIF»
				
		back
		target
		set target «w3af.w3af_target.name»
		
		back
		start
		
		exit
		'''
		
	}
}
