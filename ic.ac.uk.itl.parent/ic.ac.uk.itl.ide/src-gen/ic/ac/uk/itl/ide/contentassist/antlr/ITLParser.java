/*
 * generated by Xtext 2.17.0
 */
package ic.ac.uk.itl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import ic.ac.uk.itl.ide.contentassist.antlr.internal.InternalITLParser;
import ic.ac.uk.itl.services.ITLGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class ITLParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(ITLGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, ITLGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getTesting_toolAccess().getAlternatives(), "rule__Testing_tool__Alternatives");
			builder.put(grammarAccess.getSpiderAccess().getGroup(), "rule__Spider__Group__0");
			builder.put(grammarAccess.getZAP_ADDRESSAccess().getGroup(), "rule__ZAP_ADDRESS__Group__0");
			builder.put(grammarAccess.getZAP_MAX_DEPTHAccess().getGroup(), "rule__ZAP_MAX_DEPTH__Group__0");
			builder.put(grammarAccess.getZAP_API_KEYAccess().getGroup(), "rule__ZAP_API_KEY__Group__0");
			builder.put(grammarAccess.getZAP_TARGETAccess().getGroup(), "rule__ZAP_TARGET__Group__0");
			builder.put(grammarAccess.getW3afAccess().getGroup(), "rule__W3af__Group__0");
			builder.put(grammarAccess.getW3AF_REPORT_ADDRESSAccess().getGroup(), "rule__W3AF_REPORT_ADDRESS__Group__0");
			builder.put(grammarAccess.getW3AF_ADDRESSAccess().getGroup(), "rule__W3AF_ADDRESS__Group__0");
			builder.put(grammarAccess.getW3AF_TEST_TYPEAccess().getGroup(), "rule__W3AF_TEST_TYPE__Group__0");
			builder.put(grammarAccess.getW3AF_TARGETAccess().getGroup(), "rule__W3AF_TARGET__Group__0");
			builder.put(grammarAccess.getModelAccess().getTesting_toolsAssignment(), "rule__Model__Testing_toolsAssignment");
			builder.put(grammarAccess.getSpiderAccess().getNameAssignment_1(), "rule__Spider__NameAssignment_1");
			builder.put(grammarAccess.getSpiderAccess().getZap_targetAssignment_3(), "rule__Spider__Zap_targetAssignment_3");
			builder.put(grammarAccess.getSpiderAccess().getZap_addressAssignment_5(), "rule__Spider__Zap_addressAssignment_5");
			builder.put(grammarAccess.getSpiderAccess().getZap_max_depthAssignment_7(), "rule__Spider__Zap_max_depthAssignment_7");
			builder.put(grammarAccess.getSpiderAccess().getZap_api_keyAssignment_9(), "rule__Spider__Zap_api_keyAssignment_9");
			builder.put(grammarAccess.getZAP_ADDRESSAccess().getNameAssignment_1(), "rule__ZAP_ADDRESS__NameAssignment_1");
			builder.put(grammarAccess.getZAP_MAX_DEPTHAccess().getNameAssignment_1(), "rule__ZAP_MAX_DEPTH__NameAssignment_1");
			builder.put(grammarAccess.getZAP_API_KEYAccess().getNameAssignment_1(), "rule__ZAP_API_KEY__NameAssignment_1");
			builder.put(grammarAccess.getZAP_TARGETAccess().getNameAssignment_1(), "rule__ZAP_TARGET__NameAssignment_1");
			builder.put(grammarAccess.getW3afAccess().getNameAssignment_1(), "rule__W3af__NameAssignment_1");
			builder.put(grammarAccess.getW3afAccess().getW3af_test_typeAssignment_3(), "rule__W3af__W3af_test_typeAssignment_3");
			builder.put(grammarAccess.getW3afAccess().getW3af_addressAssignment_5(), "rule__W3af__W3af_addressAssignment_5");
			builder.put(grammarAccess.getW3afAccess().getW3af_report_pathAssignment_7(), "rule__W3af__W3af_report_pathAssignment_7");
			builder.put(grammarAccess.getW3afAccess().getW3af_targetAssignment_9(), "rule__W3af__W3af_targetAssignment_9");
			builder.put(grammarAccess.getW3AF_REPORT_ADDRESSAccess().getNameAssignment_1(), "rule__W3AF_REPORT_ADDRESS__NameAssignment_1");
			builder.put(grammarAccess.getW3AF_ADDRESSAccess().getNameAssignment_1(), "rule__W3AF_ADDRESS__NameAssignment_1");
			builder.put(grammarAccess.getW3AF_TEST_TYPEAccess().getNameAssignment_1(), "rule__W3AF_TEST_TYPE__NameAssignment_1");
			builder.put(grammarAccess.getW3AF_TARGETAccess().getNameAssignment_1(), "rule__W3AF_TARGET__NameAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private ITLGrammarAccess grammarAccess;

	@Override
	protected InternalITLParser createParser() {
		InternalITLParser result = new InternalITLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public ITLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(ITLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
